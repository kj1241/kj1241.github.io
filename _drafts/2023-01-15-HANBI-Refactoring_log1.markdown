---
layout: post
title:  "하나비 프로젝트) 리듬 게임 개발 로그 1 들어가기 전에"
date: 2023-01-15 00:10:48 +0900
image: https://drive.google.com/uc?export=view&id=1GHoI82k23TliVVdvYGe_0VAXj0OvNeYn
toc: true
categories: [Unity]
tags: [C#, Unity, Puzzle, 3 Match Game]
addsence: true
excerpt: 
---

## <green1_h2>들어가기 전 용어 정리</green1_h2>

본격적으로 들어가기전에 리듬게임 제작에 생소할 수 있는 용어들을 적어보겠습니다.  



<br>

### <green1_h3>1) 리펙토리 이란</green1_h3>

소프트웨어 코드의 구조를 변경하거나 개선하여 가독성을 높이고 유지보수를 쉽게 만드는 과정을 말합니다.  
리팩토링은 기능을 변경하지 않으면서도 코드의 품질을 향상시키는 것을 목표로 합니다.  
이는 코드를 더 이해하기 쉽게 만들고, 버그를 줄이며, 새로운 기능을 추가할 때의 비용을 낮춥니다.

- **가독성 향상:** 코드를 더 이해하기 쉽게 만들어 유지보수가 용이하도록 합니다.  
    변수명, 함수명 등을 명확하게 지어 코드의 의도를 더 명확하게 전달하도록 개선합니다. 
- **중복 코드 제거:** 중복된 코드를 찾아 제거하여 코드의 길이를 줄이고 유지보수를 쉽게 만듭니다.
- **모듈화 및 구조 개선:** 코드를 더 작은 모듈로 분할하고 모듈 간의 관계를 명확하게 정의하여 코드의 구조를 개선합니다.
- **성능 최적화:** 효율적인 알고리즘을 선택하거나 비효율적인 부분을 개선하여 프로그램의 성능을 향상시킵니다.
- **버그 수정:** 코드를 분석하고 버그를 찾아 수정함으로써 소프트웨어의 안정성을 향상시킵니다.

<br>

#### <green1_h5>리펙토리의 이유</green1_h5>

과거에 비해서 현재의 코드스타일이 변화했기 때문입니다. (유지보수관점, 코드설계 등의 관점)  
3일이라는 게임 잼에서 완성도를 목적으로 프로그램을 급박하게 작성하여 **틀린 오타, 작성 안 한 주석, 하드코딩들의 개선**을 하기 위해서입니다.


<br>
 
### <green1_h3>2) 노드</green1_h3>

플레이어의 입력을 나타내는 요소입니다.  
플레이어는 노드가 나타날 때 정확한 타이밍에 해당하는 입력을 해야 합니다.  
노드는 일반적으로 음악의 비트나 리듬에 맞춰 플레이어에게 제시됩니다.  
다양한 싱글, 롱 , 슬라이더, 패턴, 특수 노드등 다양한 특성의 노드가 존재 할 수 있습니다.  

- 범용적인 용어. 리듬게임에서는 음표를 뜻합니다. 
    노트라고도 부르기도 합니다.
- 화면에 표시되는 플레이어의 입력을 나타내는 요소입니다.  

<br>
 
### <green1_h3>3) 채보</green1_h3>

- 리듬게임의 꽃, 원래 용어는 음악을 듣고 악보로 옮겨 적는 방식 이러한 채보를 제작하는 사람에 따라서 난이도와 정밀함이 나뉩니다.  
- 게임 화면에 나타나는 음악적인 패턴이나 시퀀스를 나타냅니다.


<br>
<br>

## <green1_h2>게임의 기본 구성 방식 및 역할</green1_h2>

![게임 구성 방식](https://drive.google.com/uc?export=view&id=1GHoI82k23TliVVdvYGe_0VAXj0OvNeYn){: width="100%" }

제가 리듬좋아 팀에서 맡은 역할은 리듬게임의 메인화면을 구성하는 프로그래머였습니다.  
제가 맡은 부분은 노드 생성 로직 설계 및 구현, 스파인 애니메이션 API 연동 로직 설계 및 구현, 점수 판정 로직 설계 및 구현입니다. 


<br>
<br>

## <green1_h2>게임잼 진행 당시 코드 개발 프로세스</green1_h2>

![코드 개발 프로세스](https://drive.google.com/uc?export=view&id=1jm1aBEryNzu25wQQvseeXSCYcVNqCrU1){: width="100%" }

- 1단계 노드 생성 및 설계 구현.
- 2단계 스파인 애니메이션 설계 및 구현.
- 점수 판정 로직 설계 및 구현.
- 총 점검 및 단위 테스트 시험.

위의 표는 제가 게임잼 당시 진행했던 코드 개발  프로세스 모델입니다. 총 4단계로 이루어져 있습니다.

<br>
<br>

## <green1_h2>제작전 회의</green1_h2>

제작 당시 저희 팀이 가장 먼저 진행한 것은 회의였습니다.  
제가 연관 있는 회의록을 살짝 공개하자면 디자이너와는 "어떻게 메인화면을 구성할 것인지?" 이 부분에 대해서 질문했고 그때 당시 대답은 "리듬세상처럼 구성"하고 싶다는 답변이었습니다.  

하지만 아쉬운 점은 제가 그때 당시에는 리듬세상, 리듬닥터 같은 리듬게임류를 접해본 적이 없었습니다.  
따라서 리듬세상이 어떻게 로직이 구성되는지 짧은 동영상 시간에 파악을 할 수 없었습니다.  
(몰론 지금은 리듬세상 게임을 플레이 해보기도 하였고 영상도 많이 봐서 어떻게 구성과 설계해야 할지 압니다..)  
따라서 그 당시 게임 프로젝트를 완성하고 싶었기 때문에, 제가 할 수 있는 제안은 최대한 작게 나누어서 완성도를 높이고 그 후 추가적으로 코드를 붙이는(에자일 방법을) 제안했습니다.  

그 후 채보를 담당하는 프로그래머와는 "어떠한 형태와 방식으로 로직을 주고받을 것인지?"에 관해서 논의를 했습니다.  
결과 리듬게임을 5키로 구성하기로 하였습니다.  
또한 파일을 입출력 방식을 통한 0과 1 방식으로 노드 구성하며 노드 시간 송출 간격을 협의하였습니다.  

아티스트와는 아티스트가 구상하는 구상도에 따라 로직을 구현하기 위해서  "배경과 동작을 어떻게 구상할 것인지?"에 관하여 논의하였습니다.  
또한 오브젝트들을 유니티 프리팹 형태로 작업물을 받기로 하였습니다.  