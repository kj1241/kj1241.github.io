---
layout: post
title: "객체지향프로그래밍실습 - 일반 과제"
date: 2024-04-28 09:00:00 +09:00
image: https://drive.google.com/thumbnail?id=1FLhIVm47hd9sIk0LML0Ezt54HtFBwwO9
toc: true
categories: [Algorithm] 
keywords: C++, 객체지향 프로그래밍, 알고리즘, Visual Studio, 기초 문제 해결, 재귀함수, 배열 연산, 코드 최적화, 함수 오버로딩, 함수 오버라이딩
addsence: false
lastmod: 2024-06-16 09:00:00 +09:00
sitemap:
  changefreq : daily
  priority : 1.0
excerpt: 이 프로젝트는 C++ 기초와 객체지향 프로그래밍을 학습하기 위해 다양한 알고리즘과 문제를 해결한 연습 프로젝트입니다.
related_links:
    - url: /algorithm/OOPLab_FinalExam.html
---

## <cpp_h2>프로젝트 소개</cpp_h2>

이 프로젝트는 2015년 1학기 객체지향프로그래밍실습 과제로 진행된 C++ 연습 프로젝트입니다. 다양한 기초 문제와 알고리즘을 통해 C++ 문법과 객체지향 프로그래밍 기법에 익숙해지는 것을 목표로 했습니다. Visual Studio 2010을 사용해 시작했으며, 이후 Visual Studio 2019로 업그레이드하면서 최신 개발 도구를 활용했습니다. 이 프로젝트를 통해 변수 교환, 배열 연산, 재귀함수, 객체지향 프로그래밍 등 다양한 주제를 다루며, C++의 기본 문법과 고급 기능을 실습하고 이해할 수 있었습니다. 프로젝트의 결과물은 깃허브에 공개되어 있으며, 이는 향후 학습과 참고 자료로 활용할 수 있습니다.

<br>
<br>

## <cpp_h2>프로젝트 개요</cpp_h2>

- <span><cpp_h5>프로젝트명:</cpp_h5> 다양한 코드로 C++ 익숙해지기</span>
- <span><cpp_h5>과제:</cpp_h5> 2015년 1학기 객체지향프로그래밍실습 일반 과제</span>
- <span><cpp_h5>게임 장르:</cpp_h5> Toy Project</span>
- <span><cpp_h5>기간:</cpp_h5> 제작 완료</span>
    - ver.1: 2015.03.02~2015.05.02
- <span><cpp_h5>개발인원:</cpp_h5> Developer(1명)</span>
- <span><cpp_h5>플랫폼:</cpp_h5> PC (console)</span>

<br>

### <cpp_h3> 기술 스택 </cpp_h3>

- <span><cpp_h5>개발 도구:</cpp_h5> viusal studio 2010 → visual studio 2019</span>
- <span><cpp_h5>개발 언어:</cpp_h5> c++  </span>

<br>
<br>

## <cpp_h2> 프로젝트 특징 및 기능 구현 </cpp_h2>

이 프로젝트는 C++ 언어와 객체지향 프로그래밍 기법에 익숙해지기 위해 다양한 기초 문제와 알고리즘을 구현한 것으로, 주요 기능과 특징은 다음과 같습니다.

- 기능 구현:
	1. 기초 연습 코드
	2. 배열 연산
	3. 수학적 알고리즘
	4. 변환 알고리즘
	5. 객체지향 프로그래밍

- 프로젝트의 특징:
	- 다양한 문제 해결: 기초적인 문제부터 점차 난이도가 올라가는 문제를 단계별로 해결하면서 C++ 언어에 대한 이해도를 높였습니다.
	- 실습 중심 학습: 이론보다는 실습을 통해 각 개념을 직접 구현해봄으로써, 더 깊이 있는 학습이 이루어졌습니다.
	- 객체지향 기초 다지기: 클래스, 상속, 다형성 등 객체지향 프로그래밍의 핵심 개념을 다양한 예제를 통해 익혔습니다.
	- 최신 개발 도구 활용: Visual Studio 2010에서 2019로의 전환을 통해 최신 개발 환경의 편리함과 기능들을 체험했습니다.
	- 코드 최적화 경험: 인라인 함수와 효율적인 알고리즘을 통해 코드 최적화의 중요성을 배우고 실습했습니다.

<br>

### <cpp_h3> 1) HellowCPP</cpp_h3><red1_error> (전체 제작 기여도: 100%)</red1_error>

![HellowCPP]({{ site.google_drive }}10SzKOUw8qDB0b8TLabx54Oym3D5OAmzS{{ site.google_drive_end }}){:width="100%" height="auto" loading="lazy"}
*<cpp_h6>HellowCPP 코드 실행</cpp_h6>*

C++에 익숙해지기 위해서 연습하는 코드를 작성하였습니다. 해당 코드는 두 변수에 있는 데이터를 교환하는 코드입니다.

1. a,b,c 변수를 선언하여 a,b의 데이터 값을 바꾸는 코드를 작성하였습니다.
2. c는 temp(임의의 변수)로 만들어서 a,b 값을 바꾸었습니다.
3. temp를 사용하지 않고 a,b 변수만 사용해서 바꾸는 함수를 만들었습니다.

<br>

### <cpp_h3> 2) Swap</cpp_h3><red1_error> (전체 제작 기여도: 100%)</red1_error>

![Swap]({{ site.google_drive }}1VJneqkZsrR7jMmkEnyCulS4Xic5oZ7Oj{{ site.google_drive_end }}){:width="100%" height="auto" loading="lazy"}
*<cpp_h6>Swap 코드 실행</cpp_h6>*

해당 코드는 두 변수에 있는 데이터를 교환하기 위해서 전역함수로 제작한 코드입니다.

1. 전역 함수를 만들어서 두 수를 바꾸는 코드를 작성하였습니다.
2. 받는 인자는 call by reference를 이용하여 제작하였습니다. (일부에서는 잘못나와있는데 call by adress랑 call by reference를 혼용하면 안됩니다.)

<br>

### <cpp_h3> 3) AddAry</cpp_h3><red1_error> (전체 제작 기여도: 100%)</red1_error>

![AddAry]({{ site.google_drive }}13B_5c2C3nJW8ah0ie-9tVZrxYE1ezEKG{{ site.google_drive_end }}){:width="100%" height="auto" loading="lazy"}
*<cpp_h6>AddAry 코드 실행</cpp_h6>*

해당 코드는 배열에 덧셈을 하는 코드입니다.

1. 전역 함수를 만들어서 해당 배열의 시작 주소와 사이즈를 받아서 원하는 값을 더하는 코드입니다.


<br>

### <cpp_h3> 4) sum</cpp_h3><red1_error> (전체 제작 기여도: 100%)</red1_error>

![sum]({{ site.google_drive }}1xrpO2lJPhXs1BUqld11i4IrrO5g1SPhe{{ site.google_drive_end }}){:width="100%" height="auto" loading="lazy"}
*<cpp_h6>sum 코드 실행</cpp_h6>*

해당 코드는 1~100까지 모든 수를 더하는 코드입니다.

1. for 문을 이용하여 시간복잡도 O(n)인 코드를 작성하였습니다.
2. 수학 공식을 이용하여 시간복잡도 O(1)인 코드를 작성하였습니다.


<br>

### <cpp_h3> 5) ArithmeticSequence</cpp_h3><red1_error> (전체 제작 기여도: 100%)</red1_error>

![ArithmeticSequence]({{ site.google_drive }}10AzQNEuji7wOtOfMmKhNe7-YKIdLqhrb{{ site.google_drive_end }}){:width="100%" height="auto" loading="lazy"}
*<cpp_h6>ArithmeticSequence 코드 실행</cpp_h6>*

해당 코드는 1~n까지 모든 수를 더하는 등차수열 코드입니다.

1. 전역 변수를 제작하여, 제귀함수를 이용하여 등차수열을 구하는 코드를 작성하였습니다.

<br>

### <cpp_h3> 6) Factorial</cpp_h3><red1_error> (전체 제작 기여도: 100%)</red1_error>

![Factorial]({{ site.google_drive }}1R4eWY-uuCcKU3MjuZTBesFedZlf8iL31{{ site.google_drive_end }}){:width="100%" height="auto" loading="lazy"}
*<cpp_h6>Factorial 코드 실행</cpp_h6>*

해당 코드는 1~n까지 모든 수를 곱하는 팩토리얼 코드입니다.

1. 전역 변수를 제작하여, 제귀함수를 이용하여 팩토리얼 코드를 작성하였습니다.

<br>

### <cpp_h3> 7) Fibo</cpp_h3><red1_error> (전체 제작 기여도: 100%)</red1_error>

![Fibo]({{ site.google_drive }}11HqDCyk4Ve4I8Iptj4ZGBO6YQSGPcGJ8{{ site.google_drive_end }}){:width="100%" height="auto" loading="lazy"}
*<cpp_h6>Fibo 코드 실행</cpp_h6>*

해당 코드는 피보나치 수열을 계산하고 출력하는 프로그램입니다.

1. 전역 변수를 제작하여, 제귀함수를 이용하여 피보나치 수열을 작성하였습니다.

<br>

### <cpp_h3> 8) PascalTriangle</cpp_h3><red1_error> (전체 제작 기여도: 100%)</red1_error>

![PascalTriangle]({{ site.google_drive }}1FLhIVm47hd9sIk0LML0Ezt54HtFBwwO9{{ site.google_drive_end }}){:width="100%" height="auto" loading="lazy"}
*<cpp_h6>PascalTriangle 코드 실행</cpp_h6>*

해당 코드는 파스칼의 삼각형을 생성하고 출력하는 C++ 프로그램입니다.

1. 반복문과 조건문을 이용하여 파스칼의 삼각형을 제작하였습니다.

<br>

### <cpp_h3> 9) Convert2bin</cpp_h3><red1_error> (전체 제작 기여도: 100%)</red1_error>

![Convert2bin]({{ site.google_drive }}1U7VGuLjnSZYef7xnsCb6N6h_nbTs-iPm{{ site.google_drive_end }}){:width="100%" height="auto" loading="lazy"}
*<cpp_h6>Convert2bin 코드 실행</cpp_h6>*

해당 코드는 10진수를 2진수로 변환하는 코드입니다.

1. 제귀함수를 이용하여 2진수로 변환하는 코드입니다.

<br>

### <cpp_h3> 10) InlineClass</cpp_h3><red1_error> (전체 제작 기여도: 100%)</red1_error>

![InlineClass]({{ site.google_drive }}1U7VGuLjnSZYef7xnsCb6N6h_nbTs-iPm{{ site.google_drive_end }}){:width="100%" height="auto" loading="lazy"}
*<cpp_h6>InlineClass 코드 실행</cpp_h6>*

해단 코드는 일반 클래스와 인라인 함수에 대해서 연습하던 코드입니다.  
인라인 함수는 함수 호출의 오버헤드를 줄이기 위해 사용됩니다. 함수 호출을 컴파일러가 함수 본체로 대체(inline substitution)하도록 요청합니다.
인라인 함수는 보통 다음과 같은 경우에 사용됩니다

1. 함수 정의가 매우 짧을 때.
2. 반복적으로 호출되는 간단한 함수일 때. 

<br>

### <cpp_h3> 10) VirtualFunction</cpp_h3><red1_error> (전체 제작 기여도: 100%)</red1_error>

![VirtualFunction]({{ site.google_drive }}1KJHlN9cmB_RxGdl9AvAvpAUexErjWUyB{{ site.google_drive_end }}){:width="100%" height="auto" loading="lazy"}
*<cpp_h6>VirtualFunction 코드 실행</cpp_h6>*

이 코드는 두 개의 클래스 계층 구조를 정의하고, 그들의 생성자와 소멸자 동작을 관찰하며, 가상 함수의 동작을 보여주는 예제입니다. 상속 관계와 가상 클래스에서 생성자 소멸자는 어떻게 동작하는지 공부하는 코드입니다.

<br>

### <cpp_h3> 11) Override</cpp_h3><red1_error> (전체 제작 기여도: 100%)</red1_error>

![Override]({{ site.google_drive }}1mfiIePEkgXJtR2p2KXGPRgo5WG1RPLFy{{ site.google_drive_end }}){:width="100%" height="auto" loading="lazy"}
*<cpp_h6>Override 코드 실행</cpp_h6>*

해당 코드는 다형성과 가상 함수를 사용하여 Player, Boss, Monster 객체의 Func() 메서드를 호출하는 예제입니다.  
오버로딩과 오버라이딩에 대해서 비교해서 공부를 했습니다.  
오버라이딩은 파생 클래스가 기본 클래스에서 상속받은 가상 함수를 재정의하는 것입니다. 오버라이딩을 통해 파생 클래스는 기본 클래스의 함수 동작을 변경할 수 있습니다. 오버라이딩된 함수는 기본 클래스의 함수와 동일한 이름, 리턴 타입, 매개변수 목록을 가져야 합니다. 오버라이딩을 사용하면 다형성을 구현할 수 있습니다.

<br>

### <cpp_h3> 12) FunctinOverloading</cpp_h3><red1_error> (전체 제작 기여도: 100%)</red1_error>

![FunctinOverloading]({{ site.google_drive }}1mJUevDWZzjIvClg-V6eNL-aqG7uXSYW3{{ site.google_drive_end }}){:width="100%" height="auto" loading="lazy"}
*<cpp_h6>FunctinOverloading 코드 실행</cpp_h6>*

해당 코드는 간단한 Player 클래스를 정의하여 캐릭터의 상태를 관리하고, 특정 동작(공격, 데미지 처리, 점프)을 수행하는 예제입니다  
오버로딩과 오버라이딩을 비교하기 위한 두번째 코드입니다.  
오버로딩은 같은 이름의 함수를 여러 개 정의하는 것을 의미하며, 함수의 매개변수의 개수나 타입이 달라야 합니다. 이를 통해 함수 호출 시 전달되는 인수에 따라 적절한 함수가 선택되어 호출됩니다. 오버로딩은 컴파일 타임에 결정되는 정적 다형성의 한 형태입니다.

<br>

### <cpp_h3> 13) Inheritance</cpp_h3><red1_error> (전체 제작 기여도: 100%)</red1_error>

![Inheritance]({{ site.google_drive }}15RsMsHY6a5k5lUYwgwCeAX9GvY8EKo7J{{ site.google_drive_end }}){:width="100%" height="auto" loading="lazy"}
*<cpp_h6>Inheritance 코드 실행</cpp_h6>*

이 코드는 두 개의 클래스 계층 구조를 정의하고, 그들의 생성자와 소멸자 동작을 관찰하며, 가상 함수의 동작을 보여주는 예제입니다. 상속 관계와 가상 클래스에서 생성자 소멸자는 어떻게 동작하는지 공부하는 코드입니다. 
또한 PBP RPG를 만들기 위한 기초입니다. 캐릭터 상태가 어떻게 구성되야 하고 변화해야하는지 보여주는 코드입니다.

<br>
<br>

## <cpp_h2> 결과(성과) 및 데모 </cpp_h2>

- <span><cpp_h5>성과:</cpp_h5> 2015년 1학기 객체지향프로그래밍실습 일반 과제 </span>
- <span><cpp_h5>깃허브(코드):</cpp_h5> [https://github.com/kj1241/Algorithm_Portfolio/tree/main/OOPLab](https://github.com/kj1241/Algorithm_Portfolio/tree/main/OOPLab)</span>

<br>
<br>

## <cpp_h2> 비고 및 여담 </cpp_h2>

- 배운점 
	1. 기초 다지기:
		- 변수 교환, 배열 연산 등 기본적인 문제를 해결하면서 C++ 문법에 익숙해질 수 있었습니다. 특히, 포인터와 참조자(call by reference)를 활용한 변수 교환 코드는 메모리 관리와 관련된 중요한 개념을 익힐 수 있는 기회였습니다.

	2. 알고리즘 구현:
		- 수학적 알고리즘(등차수열, 팩토리얼, 피보나치 수열 등)을 구현하면서 시간복잡도와 공간복잡도를 고려하는 습관을 기르게 되었습니다. 이를 통해 효율적인 코드를 작성하는 방법을 배웠습니다.
	
	3. 재귀함수와 반복문:
		- 재귀함수를 이용한 다양한 알고리즘(팩토리얼, 피보나치 수열 등)을 구현하면서 재귀함수의 장단점을 이해하게 되었습니다. 반복문과의 비교를 통해 적절한 상황에서 어떤 방법을 사용하는 것이 좋을지 판단할 수 있는 능력을 기를 수 있었습니다.

	4. 객체지향 프로그래밍:
		- 클래스, 상속, 가상 함수 등 객체지향 프로그래밍의 기본 개념을 이해하고 실제로 구현해보는 경험을 했습니다. 이를 통해 코드의 재사용성과 확장성을 높이는 방법을 배웠습니다. 또한, 함수 오버로딩과 오버라이딩을 비교하며 다형성(polymorphism)의 중요성을 깨달았습니다.

	5. 코드 최적화:
		- 인라인 함수와 같은 최적화 기법을 적용해보면서 성능을 고려한 코딩 습관을 기를 수 있었습니다. 특히, 함수 호출 오버헤드를 줄이는 방법을 익히게 되었습니다.

- 여담
	- 프로젝트를 진행하면서 코드의 가독성과 유지보수성을 고려하는 습관을 기르게 되었습니다. 이는 이후 다른 프로젝트를 진행할 때에도 큰 도움이 되었습니다.
	- 솔직히 말하자면, 면접에서 기초적인 질문을 받으면 대답하기 싫을 때가 있습니다. 프로젝트를 통해 기초는 충분히 다졌다고 생각하기 때문에, 더 깊고 복잡한 주제에 대해 이야기하는 것을 선호합니다. 기초적인 질문에만 머물기보다는, 제가 이 프로젝트에서 배운 점들을 어떻게 실전에 적용했는지, 그리고 더 높은 수준의 문제를 해결하기 위해 어떤 노력을 했는지를 설명하고 싶습니다.

 이 프로젝트는 저의 프로그래밍 실력을 한 단계 끌어올리는 데 큰 기여를 했으며, 이후 더 발전된 프로젝트와 과제에 도전할 수 있는 기반을 마련해 주었습니다.

