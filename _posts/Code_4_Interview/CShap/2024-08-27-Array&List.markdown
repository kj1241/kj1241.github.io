---
layout: post
title: "C# 기술면접 인터뷰1 - Array vs List"
date: 2024-08-27 09:00:00 +09:00
image: https://drive.google.com/thumbnail?id=1VF-ZY8yIyrSupZDCKUetKPsrZ_E-7-mN
toc: true
categories: [CShap]
keywords: 기술 면접, 배열, 리스트
addsence: false
lastmod: 2024-08-27 09:00:00 +09:00
sitemap: 
  changefreq : daily
  priority : 1.0
excerpt: 기술면접에 나오는 단골 문제를 작성하고 있습니다. 배열의 고정된 크기와 리스트의 가변적 크기를 비교합니다.
related_links:
---

원래 이런 방식의 프로그래밍을 좋아하지는 않지만, 이 탭에서는 오로지 기술 면접을 위해 글을 작성할 것입니다. 이제부터 기술 면접에서 나오는 모든 것들을 파헤쳐 봅시다.

기술 면접의 최고 단골 문제 중 하나입니다. 여기서 저의 문제는 현재 배열(Array)이 '배열'로 인지되지 않고 있다는 점입니다. 배열로 인지하면 대답은 생각보다 쉬워집니다.

<br>
<br>


## 1. 출제의 의도

프로그래머는 프로그램을 작성할 때 데이터에 맞는 자료구조를 선택해야 합니다. 이 질문은 기술의 이해도와 문제 해결 능력을 평가하기 위한 목적으로 출제됩니다.

<br>
<br>

## 2. 정답

1. Array(배열)
    - 고정된 크기: 배열은 크기가 고정되어 있습니다. 배열을 생성할 때 크기를 지정하며, 생성된 후에는 크기를 변경할 수 없습니다.
    - 동일한 데이터 타입: 배열은 모든 요소가 동일한 데이터 타입이어야 합니다.
    - 빠른 접근 속도: 배열은 인덱스를 통해 특정 요소에 빠르게 접근할 수 있습니다.
    - 초기화 필요: 배열을 생성할 때 크기와 타입을 지정해주어야 하며, 생성된 배열의 각 요소는 자동으로 기본값(예: 숫자는 0, 객체는 null)으로 초기화됩니다.

    ```c#

    int[] myArray = new int[5]; // 크기가 5인 정수 배열 생성
    myArray[0] = 10; // 첫 번째 요소에 값 할당
    Console.WriteLine(myArray[0]); // 출력: 10

    ```

2. List
    - 크기 가변성: 리스트는 크기가 가변적입니다. 요소를 추가하거나 삭제할 때 리스트의 크기가 자동으로 조정됩니다.
    - 동일한 데이터 타입: C#의 리스트는 제네릭 타입으로, 특정 데이터 타입에 대해서만 리스트를 생성할 수 있습니다. 예를 들어, List<int>는 정수형 데이터만 저장할 수 있습니다.
    - 다양한 메서드 지원: 리스트는 요소 추가, 제거, 검색, 정렬 등의 다양한 기능을 제공하는 메서드를 내장하고 있습니다.
    - 동적 배열: 리스트는 동적으로 크기를 조절하며, 배열의 기능을 확장한 자료 구조라고 할 수 있습니다.

    ```c#

    List<int> myList = new List<int>(); // 정수형 리스트 생성
    myList.Add(10); // 리스트에 요소 추가
    myList.Add(20);
    Console.WriteLine(myList[0]); // 출력: 10
    myList.Remove(10); // 값이 10인 요소 제거
    Console.WriteLine(myList.Count); // 출력: 1 (요소의 개수)

    ```

3. 차의점(★이부분 키워드 외우면됨)

- 크기: 배열은 고정된 크기, 리스트는 가변적인 크기입니다.
- 타입: 배열은 동일한 타입, 리스트는 제네릭 타입으로 특정 타입에 대해 생성할수 있습니다.
- 성능: 배열은 고정된 크기 덕분에 메모리 접근 속도가 빠를 수 있지만, 리스트는 크기 조정에 유연성을 제공합니다.
- 기능: 리스트는 배열보다 더 다양한 메서드와 기능을 제공합니다.

<br>
<br>

## 3. 이 질문에 대한 나의 생각

<br>

### 1) 내가 왜 이 문항을 계속 말을 못하는가?

제가 이 문항에서 왜 답을 못하는가에 대해서 곰곰이 생각해봤습니다. 그 이유는 제가 리스트를 안 좋아하기 때문입니다. 

실제로 코딩을 시작하면 프로그래머는 데이터의 크기를 정확하게 파악할 수 있습니다. 그러면 자연스럽게 리스트를 사용하게 되면, List<T>.Capacity를 사용해서 크기를 고정시킵니다. 혹시 피치 못할 사정으로 크기를 변경해야 한다면, 이미 그 시점에도 프로그래머는 크기를 알고 있습니다. 애초에 선언할 때 크기를 확장시켜야 하며, 가변적으로 사용하면 오버헤드가 발생합니다. 따라서 리스트의 장점인 '가변적 크기'는 이론적으로는 좋을 수 있지만, 실전에서는 그렇게 좋은 느낌이 아니기 때문에 애매하게 느껴집니다.

다음으로 리스트의 장점을 보겠습니다. 리스트는 sort, find와 같은 기능을 제공합니다. 그런데 이런 기능들은 배열로 구현하는 데 몇 분 걸릴까요? find는 while을 사용해서 인덱스를 검사해 요소를 찾으면 되고, sort는 퀵정렬을 사용해서 만들면 됩니다. 그래서 여러 기능을 제공하는 리스트의 장점이라고 하기에는 애매합니다.

예전에 리스트에 대해서 말이 안 되는 소리를 들은 적이 있는데, 삽입과 삭제 부분에서 배열보다 리스트가 유리하다는 이야기를 들었습니다. 그런데, 삽입과 삭제가 빈번하게 일어난다면 배열과 리스트 자체를 사용하는 것이 아니라, 링크드 리스트를 만들어서 사용해야 합니다.

따라서 제 입장에서는 배열이나 리스트나 그렇게 큰 차이를 느끼지 못합니다. 물론 저도 리스트를 사용할 때가 있습니다. 코드를 날림으로 작성하고 싶을 때, 기능 구현이 귀찮고 이미 제공된 기능들을 사용하고 싶을 때 리스트를 사용하게 됩니다. 솔직하게 대답하면 좋은 인상을 주지 못할 수도 있으니, 이 부분에 대한 연계 질문에 대답하기 싫어서 머릿속으로 답변을 회피하고 있는 걸 수도 있습니다.

이런 질문은들은 면접을 볼때 면접관에게 잘 보이기 위해 꾸며내서 말하고 싶은 생각과 잘못 보이더라도 가감없이 말하고 싶은 생각이 공존합니다. 고민하다가 어쩌정하게 대답을 못하는거 같습니다. 따라서 방향성을 정해야 겟습니다.

<br>

### 2) 이제 앞으로의 나의 답

Arry와 List는 메모리상에 연속으로 저장되지만, 차이점은 이론적으로 List가 유형성과 다양한 기능을 제공한다는 점입니다. 
하지만 실제 프로그래밍을 할 시에 크기를 프로그래머는 크기를 알고 있어서 Capacity를 사용해서 처음 크기를 고정한다는 점과 List의 크기가 변경되면 오버헤드가 심하다는 점, 배열로 기능을 만들 수 있다는 점등을 종합 해 볼때 큰 차이점이 없습니다. 
List는 프로토타입에서 빠르게 제작하고 싶을때 사용합니다.