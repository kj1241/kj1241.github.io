---
layout: post
title: "2024.08.21 - 면접 피드백"
date: 2024-08-21 21:00:00 +09:00
image: https://drive.google.com/thumbnail?id=1J_dHyNf-T4YbvqSBjrgBK7K6SWitl2ep
toc: true
categories: [Programming_Interview]
keywords: 
lastmod: 2024-08-21 21:00:00 +09:00
sitemap: 
  changefreq : daily
  priority : 0.1
addsence: true
excerpt: 
related_links:
---

## <feedback_h2>1. 면접에서 드러난 약점 </feedback_h2>

6개월 만에 다시 면접을 보게 되면서 많은 생각이 들었습니다. 솔직히 말해 저는 면접을 저의 약점 중 하나로 여겨왔고, 과거에는 이를 숨기기만 급급했습니다. 하지만 이번 기회를 통해 저 자신을 되돌아보고, 이를 성장의 발판으로 삼아야겠다는 결심을 하게 되었습니다. 제가 블로그를 시작한 이유도 저를 더 객관적으로 바라보고 스스로에게 피드백을 주기 위해서입니다. 앞으로 더 발전할 수 있도록 노력해 보겠습니다.

<br>

### <feedback_h3> 1) 문제점 고찰 </feedback_h3>

이번 면접을 돌아보며 제가 부족했던 이유들을 분석해 보았습니다.

1. 트라우마로 인한 자신감 부족
2. 지나치게 많은 생각
3. 준비되지 않은 답변

#### <feedback_h4>자신감 부족: 트라우마의 영향</feedback_h4>

프로그래밍 면접에서만 유독 자신감이 떨어지는 이유가 있었습니다. 예를 들어, 보건복지부 인턴 면접이나 빅데이터 관련 면접, 그리고 아르바이트 면접 등에서는 긴장하지 않았고, 말을 더듬지도 않았습니다. 그러나 프로그래밍 관련 면접에서는 종종 생각이 막히고 유연하게 대처하지 못하는 경우가 많았습니다.

이 문제의 원인은 학부 시절 NC 인턴 면접으로 거슬러 올라갑니다. 당시 교수님의 추천으로 면접 기회를 얻었지만, 준비가 부족해 전혀 대답을 하지 못했습니다. 그 면접은 압박 면접이었고, 기술적인 질문에 대한 답변을 하지 못할 때마다 더 깊이 파고드는 유도 질문이 이어졌습니다. 면접 후 느꼈던 창피함과 교수님에 대한 죄송함이 아직도 머릿속에 남아 있습니다. 이 경험이 프로그래밍 면접에 대한 자신감 저하로 이어졌고, 중요한 순간마다 생각이 막히는 원인이 된 것 같습니다.

#### <feedback_h4>지나치게 많은 생각</feedback_h4>

면접에서 '전문가'라는 단어를 들었을 때, 순간적으로 혼란이 생겼습니다. 이상적인 상황에서는 용어가 애매하다고 솔직히 말하고, 관련 생각을 자신 있게 풀어가야 하지만, 실제 면접에서는 애매함에 갇히고 말았습니다.

예를 들어, 제 기준에서 '전문가'는 박사급 이상의 지식을 가진 사람을 의미하는데, 이 기준이 너무 높게 설정된 것은 아닌지 고민했습니다. 또는 논문을 보고 구현한 것이 전문가로 인정받을 수 있을지 자문하며, 이러한 여러 생각들이 한꺼번에 몰려와 자신 있게 답변하지 못했습니다.

#### <feedback_h4>준비되지 않은 답변</feedback_h4>

이번 면접에서는 조금 다르게 접근했습니다. 기업 분석은 했지만, 평소처럼 기술 면접에 대비해 답변을 암기하지 않았습니다. 과거 면접에서 외운 듯한 답변을 한다는 피드백을 받은 적이 있어, 이번에는 자연스럽게 답변하려고 노력했습니다.

그러나 결과적으로, 제가 오래 쉼으로서, 기초적인 부분을 애매하게 인지하고 있다는 사실이 드러났습니다. 준비되지 않은 상태로는 명확한 답변을 하기 어렵다는 점을 다시금 깨달았습니다.

<br>
<br>

## <feedback_h2> 2. 면접 피드백 </feedback_h2>

<br>

### <feedback_h3> 1) 기술 면접 피드백 </feedback_h3>

![해커스쿨 인장]({{ site.google_drive }}18R_K0tlGl-D6y3L1SvlFgLkDKCLYHIyK{{ site.google_drive_end }}){:width="100%" height="auto" loading="lazy"}

이 이미지를 보여드리는 이유는 단순히 변명하려는 것이 아닙니다. 과거에는 더 열정적으로 랭크를 올렸고, C++의 경우 플래티넘 등급까지 도달했었습니다. 하지만 시간이 지나면서 문제 수가 많아지고, 그로 인해 순위가 골드로 내려갔습니다. 혼자서 작업하는 시간이 늘어나고, 스스로가 보고 싶은 부분만을 깊이 탐구하다 보니, 전체적인 시야가 좁아지고 있다는 것을 실감하고 있습니다. 기초 기술 문제에 대해선 다시금 반성하며 보완할 필요가 있다고 느낍니다.


#### <feedback_h4>제네릭(Generic)에 대해 설명해 주세요</feedback_h4>

**이 키워드에 대답 못한 이유:**
1. 키워드를 듣자 머리속에 "System.Collections.Generic;" 이거 밖에 생각이 안났습니다.
2. <T>라는 힌트를 들었을때 탬플릿 밖에 기억이 안났습니다.

**말하고 싶던 키워드:**
- 재사용성

**머리속에 있던 답:**
이에 대한 답변을 못한 이유는 애매하게 기억해서 그렇습니다. "System.Collections.Generic" 제너릭 컬렉션 클래스와(List<T>, Dictionary<TKey, TValue>, Queue<T>, Stack<T>등)와 인터페이스가 포함되어 있습니다. 
질문에서 요구하던 제너릭은 클래스, 인터페이스, 구조체등 사용할때 타입 매개변수를 사용할수 있는 기능입니다. 즉 특정 타입에 의존하지 않는 코드를 사용함으로서 <feedback_h5>재사용성</feedback_h5>을 높일수 있습니다.

추가해야될 생각:
제네릭은 C# 용어이고 탬플릿은 C++용어입니다. 둘다 타입에 의존하지 않고 코드의 재사용성을 높힌다는 공통점을 가지고 있지만, 제네릭의 큰 이점은 런타임시 타입정보가 유지된다는 점입니다. 하지만 탬플릿은 컴파일시 타입이 결정됩니다.

#### <feedback_h4>추상 클래스와 인터페이스의 차이점에 대해 설명해 주세요</feedback_h4>

**이 키워드에 대답 못한 이유:**
1. 추상클래스 키워드로 상속은 생각했으나 순간 Vritual 가상함수가 머리속에 맴돌았습니다.


**말하고 싶던 키워드:**
- 단일 상속

**머리속에 있던 답:**
추상 클래스는 단일 상속만 가능합니다. 반면 인터페이스는 다중 기능 구현으로서 여러 클래스가 참조할 수 있으며 다이아몬드 상속을 필요할 때 사용합니다.

**추가해야할 생각:**

| 특성       | 추상 클래스                              | 인터페이스                                                      |
|------------|-------------------------------------------|-----------------------------------------------------------------|
| **상속**   | 단일 상속만 가능                         | 다중 구현 가능                                                  |
| **구현된 멤버** | 구현된 메서드와 필드를 포함할 수 있음 | 구현된 멤버 없음 (C# 8.0 이후 기본 구현 가능)                  |
| **필드**   | 필드, 생성자 포함 가능                   | 필드 포함 불가                                                  |
| **목적**   | 기본 클래스 기능 제공 및 공통 동작 구현  | 클래스가 특정 기능을 구현하도록 강제                            |
| **사용 시점** | 여러 클래스에 공통적인 기능을 제공하고, 일부만 자식 클래스에서 구현하고 싶을 때 | 클래스들이 특정 기능을 구현해야 하도록 강제하고, 다중 상속의 효과를 얻고자 할 때 |

#### <feedback_h4>스택과 큐에 대해 설명하고 유니티에서의 사용처에 대해 설명하시오</feedback_h4>

**이 키워드에 대답 못한 이유:**
이 질문에 제대로 답변하지 못했던 이유는 자료구조가 중요한 주제임에도 불구하고, 유니티에서의 사용처가 떠오르지 않았기 때문입니다. 보통 프로그래밍할 때는 특정 문제의 특성에 맞게 배열이나 리스트를 사용하고, 스택, 큐, 트리등 성질을 구현합니다. 그렇기에 유니티에서 스택을 사용해야 할 상황을 떠올리는 것이 어려웠습니다.


면접에서 스택이 UI에서 사용된 적이 있냐는 질문을 받았을 때, 유니티 엔진에서 UI를 스택 구조로 구현할 필요가 있는지 의문이 들었습니다. 예를 들어, UI의 계층 관리를 위해 스택 구조가 쓰일 수 있지만, 이는 유니티 엔진에서 제공하는 기능을 이용하는 것이지, 직접 스택 코드를 작성하는 것이 아니라고 생각했습니다.

**말하고 싶던 키워드:**
- 선입선출

**머리속에 있던 답:**
스택은 후입선출(LIFO) 방식이며, 큐는 선입선출(FIFO) 방식입니다. 큐는 주로 오브젝트 풀링이나 서버 패킷 전송에 사용되며, 스택은 깊이 우선 탐색 같은 경우에 사용됩니다.

<br>

### <feedback_h3> 2) 유니티 면접 피드백 </feedback_h3>

#### <feedback_h4>AssetBundle과 Addressables을 사용해 본 적 있나요?</feedback_h4>

**이 키워드에 대답 못한 이유:**
이 질문에 대해 얼버무렸던 이유는 사용해 본 적이 없었기 때문입니다. 
지연 로딩을 통한 최적화, 서버에서 에셋을 받아와 스토어에서 버전 업데이트 없이 교체하는 기능 등은 영상을 보고 알고 있었지만, 실제로 구현해보지 않았기에 정확한 답변을 하지 못했습니다. 테스트해본 적이 없으니, 거짓말을 할 수 없다고 판단해 솔직하게 답변하지 못했습니다.

**앞으로 방향:**
GDC 2024 Unity 분석을 마저하고 관련 내용을 블로그에 계시할 예정입니다.

#### <feedback_h4>AssetBundle과 Addressables을 사용해 본 적 있나요?</feedback_h4>


#### <feedback_h4>최적화 경험이 있나요?</feedback_h4>

**이 키워드에 재대로 대답 못한 이유:**
해당 키워드는 기업 분석을 하면서 원래 준비했던 답변들 중 하나입니다.

**원래 준비한 키워드의 대답은 다음과 같습니다.**
- LOD: 레벨오브 디테일로 거리에 비래해서 폴리곤 수를 적게 만듭니다.
- Occlusion Culling: 뒤에 있는 물체는 랜더링하지 않습니다.
- 프리패브 풀링: 오브젝트를 생성해두고 재사용해서 사용합니다.
- 멀티스레딩: 다중 코어를 사용하여 복잡한 계산을 효율적으로 계산합니다.
- 데이터 지연 로딩: AssetBundle과 Addressables을 사용해서 필요없는 데이터는 로드하지 않습니다.
- GPU 인스턴싱: 비슷한 오브젝트를 GPU에 올리면서 드로우콜을 줄입니다.

해당 데이터 지연 로딩을 제외한 해당 키워드는 실제로 성능을 올리기 위해서 사용해본 경험이 있습니다. 근데 문제는 막상 면접에 들어가서는 정작 기억나는 대로 대답한 종류는 LOD, GPU 인스턴싱, 프리패브 풀링, 데이터 지연 로딩밖에 이야기하지 못했습니다.  머릿속에 준비한 키워드가 많다 보니, 이를 전부 설명해야 한다는 압박감에 오히려 대답을 더 어렵게 만든 것 같습니다.


#### <feedback_h4>유니티에서 안드로이드 빌드 후 디버깅해본 적 있나요?</feedback_h4>

**이 키워드에 재대로 대답 못한 이유:**
질문이 애매하다고 느껴서 재대로 대답을 하지 못했습니다. 솔직히 빌드에서 에러가 있을 경우에는 어떠한 방법을 찾아서 디버깅해야할 경우가 필요할 수도 있습니다. 저는 atrc 프로젝트에서 빌드 디버깅을 하기위해서 유니티에서 지원하는 디버깅 빌드를 사용해보기도 했고 실제로 디버깅 에러들을 텍스트로 빼서 작성하게 제작하였습니다. 같이 일하던 책임 연구원깨서는 UI로 제작했습니다. 이와 같이 경험적으로 그냥 디버깅일 필요하면 만들면 됩니다. 근데 질문의 대답으로는 '그낭 만들면 됩니다.' 라는 대답이 정말 애매하다고 생각합니다. 제가 몇번 사용해본 결과 이 대답은 절맥기 입니다. 대화를 이어나가게 하지 못하게 만듭니다. 빌드 덮어씌위기로 빌드가 꼬여서 에러난거 빼고는 거의 디버깅에서 에러를 잡으면 빌에서 에러나는 것들을 본적이 없습니다. (정말 큰 문제들은 빌드시 디버깅에 찍히않고 에러나는 것들입니다.) 

<br>

### <feedback_h3> 3) 기타 면접 피드백 </feedback_h3>

#### <feedback_h4>쉐이더를 전문적으로 공부하신 적 있나요?</feedback_h4>

**이 키워드에 재대로 대답 못한 이유:**
용어 자체가 애매합니다. 면접에서 '전문가'라는 키워드를 들었을 때, 순간적으로 애매하다는 생각이 들었습니다. 예를 들어, 제 기준에서 '전문가'는 박사급 이상의 지식을 가진 사람을 의미한다고 생각하는데, 이 기준이 너무 높게 설정된 것은 아닌가 고민하게 됩니다. 또는, 다른 사람들이 쉽게 구현하지 못하는 것을 논문을 보고 구현했다면, 이를 전문가로 칭할 수 있을지 자문하게 됩니다. 앞으로는 더 나은 답변을 하려는 시도보다는, 있는 그대로의 자신을 솔직하게 표현하는 것이 중요하다고 느꼈습니다.

#### <feedback_h4>본인한테 화내지 않기</feedback_h4>

집에 오면서 차분히 면접들을 되짚어 볼때 처음 대답을 제대로 못한 이후로 뭔가 제 자신한테 화가나 있었습니다. 화를 참기 위해서 무의식적으로 혀내밀고 있는 자신을 발견했습니다. 면접에서 이런 감정을 느끼는 것은 면접 태도에도 좋지 않은 영향을 미친다는 것을 깨닳았습니다. 앞으로는 실수에 연연하지 않고 면접에 임해 보겠습니다.

#### <feedback_h4>기타 궁금하신 점은 없으신가요</feedback_h4>

사실 회사에 대해 큰 관심이 없었던 것이 맞습니다. 그렇다고 해서 제가 열정이 없는 것은 아닙니다. 저는 주어진 일에 최선을 다하는 성격이기도 하고 기업에 대해서 사전에 분석을하기 떄문에 크게 의미 없는 질문을 던지기도 합니다. 지금 상황에서 다시 피드백을 해보니 다른 사람 눈에는 그렇게 비춰지지 않을 수도 있다는 것을 깨닳았습니다.

<br>

### <feedback_h3> 4) 억울했던 기업 분석 피드백 </feedback_h3>

면접 요강을 살펴보도록 합시다.

```bash

증강현실(AR)분야 국내 최다 사용자 앱을 개발 운영 중이며 
가상현실, 복합현실 뿐만아니라 인공지능 융복합 콘텐츠를 개발-서비스하고 있습니다. 

```
기업 분석에서는 해당 회사가 AI를 사용해서 융복한 콘텐츠를 개발한다고 해서 이에 맞춰서 준비했습니다. 준비한 키워드는 다음과 같습니다.
- 컴퓨터 비전과 객체 인식: AI가 사용자의 주변 환경을 분석하여 특정 물체를 인식하면, AR 시스템이 그 물체 위에 관련된 정보나 가상 오브젝트를 증강시키는 프로그램을 만들 수 있습니다.
- 얼굴 인식과 트래킹:  AI는 사용자의 얼굴 움직임에 따라 필터를 실시간으로 조정하여 더욱 몰입감 있는 AR 경험을 제공할 수 있습니다.
- 자연어 처리: AI의 자연어 처리(NLP) 기술을 통해 사용자의 음성 명령을 이해하고, 그에 맞는 AR 콘텐츠를 제공할 수 있습니다.

해당 회사가 완구회사인지 알았지만, 실제로 면접을 진행하면서 해야하는 일이 AI와 거리가 멀다는 것을 질문에서 파악하고 당황했던거 같습니다. 물론 AI일을 해도 되고 안해도 되지만 준비하지 않은 방향으로 흘러갈떄 당황함을 참을수 없었습니다. 

<br>
<br>

## <feedback_h2> 3. 앞으로 면접에서 행해야 할점 </feedback_h2>

아직 제가 좀 더 많이 부족하다고 생각합니다. 모의 면접에서 한 마디도 대답하지 못하는 상태에서 더욱 발전했지만 제가 생각하는 이상치보다는 한참 미치지 못합니다. 따라서 좀더 말하는 연습이 필요하다고 생각합니다.

1. 틀렸더라도 본인한테 화내지 않기
2. 면접에 관해서 좀더 준비해보기 